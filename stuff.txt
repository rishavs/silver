    CREATE TABLE USERS(
        UNQID TEXT NOT NULL,
        EMAIL TEXT NOT NULL UNIQUE,
        PASSWORD TEXT NOT NULL,
        NICKNAME TEXT NOT NULL,
        FLAIR TEXT,
        ROLE TEXT DEFAULT 'user'
        IS_DELETED BOOL DEFAULT FALSE,
        BANNED_TILL TIMESTAMP,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP
    );

    CREATE TABLE POSTS(
        UNQID TEXT NOT NULL,
        TITLE TEXT NOT NULL,
        LINK TEXT,
        THUMB TEXT,
        CONTENT TEXT,
        LIKED_COUNT INT DEFAULT 1,
        LIKED_BY TEXT [] DEFAULT '{}',
        AUTHOR_ID TEXT NOT NULL,
        AUTHOR_NICK TEXT,
        AUTHOR_FLAIR TEXT DEFAULT 'Silly Goose',
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP
    );

    insert into posts (unqid, title, link, thumb, content, author_id, author_nick)
    values ('pid01', 'All the Rage back Home', 'yahoo.com', 'https://d1csp7g2pnyvdv.cloudfront.net/uploads/story_world/cover/20/3b710db6-f1d3-431b-afe0-ab6e51bfa0b5.jpg',
    'Everyday life is hard for Tate, especially making friends. He likes to play with spinning tops all the time, which is uncommon for a third grader. A new classmate of his, Logan, can tell that Tate is different, that thereâ€™s something very special about him.
Together, they discover the unimaginable: Tates top can transport them to different dimensions, where they meet unexpected friends and experience fun adventures together.
Tate has difficulty making friends because his autism makes him different. But an unexpected adventure with a new classmate could be the start of something great.
Tates top transports him and Logan to the Mesozoic Era when dinosaurs ruled the Earth! They are excited, but also scared. Hopefully, they can have a little fun and not become the lunchtime special!
The boys spin the top in a creative way at recess. But, instead of time traveling backward, they find themselves in a future world!
The top takes Tate and Logan to ancient Egypt where they encounter exciting yet unfamiliar features of the Egyptian life, including hieroglyphics, pharaohs and pyramids.
Tate and Logan have forged a great friendship, but when Logan asks Tate to meet his other friends, Tates insecurities creep up again.', 'authid01', 'Dan Simmons')

DO
$$
BEGIN
    
    IF (select banned_till from users where unqid = 'f127becc-6353-4b0f-b999-5541b985a5be') < now() THEN
      RAISE EXCEPTION 'User is banned';
    ELSE
        insert into posts (unqid, title, link, content, author_id, author_nick, author_flair) 
            SELECT 'pid03', 'Sample post title', 'www.google.com', 'This is a sample Post Content', unqid, nickname, flair 
            from users where unqid = 'f127becc-6353-4b0f-b999-5541b985a5be';
    END IF;
END
$$;


update posts
set liked_by = (select array_agg(distinct e) from unnest(liked_by || '{user04}') e),
liked_count = (select array_length(liked_by, 1) + 1)

update posts
set liked_by = '{}'

    CREATE TABLE COMMENTS(
        UNQID TEXT PRIMARY KEY,
        LEVEL INT NOT NULL,
        POST_ID TEXT,
        PARENT_ID TEXT,
        children_ids TEXT [] DEFAULT '{}',
        CONTENT TEXT,
        AUTHOR_ID TEXT NOT NULL,
        AUTHOR_NICK TEXT,
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP
    );

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid100', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', '{"cid110", "cid120" }', 'This is a PARENT level comment', 'JRR Tolkien');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid110', 1, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid100', '{"cid112"}', 'This is a CHILD level comment', 'Mark Twain');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid120', 1, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid100', '{}', 'This is a 2nd CHILD level comment', 'JK Rowling');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid112', 2, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid110', '{}', 'This is a GRANDCHILD level comment', 'RL Stephenson');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid200', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', '{}', 'This is 2nd PARENT level comment', 'Dante');



    This is one of the most common issues people run into in Crystal. It is because instance variables (in this case status) must be assigned to a local variable first, or use try. So you can do something like store.status.try do |status| and then check status == "error"
It would be awesome if Crystal gave you an error because it is nearly impossible to figure out without reading it in the docs or someone telling you
Luckily once you know about it it is pretty easy to workaround :)
More info here: https://crystal-lang.org/docs/syntax_and_semantics/if_var.html under "Limitations"
Or actually you might need store.try since it appears to also be nilable
Also, I'd consider not allowing status and message to be nil and instead make just the store billable. So if the store is there, it always has a status and message


creating human readable hashes;
    adjective + noun + verb + adverb
    eg. Purple pony dances warily

    update tabl1
set    arr_str = (select array_agg(distinct e) from unnest(arr_str || '{b,c,d}') e)
where  not arr_str @> '{b,c,d}'

Currently, only allowing liking and unliking posts. No Disliking. If need to dislike, then will add an array for disliked by and then calculate 
liked count = liked by - disliked by.

update users set banned_till = now() + interval '1 week' where unqid = 'f127becc-6353-4b0f-b999-5541b985a5be';

User banning 3 types:
    - shadow ban - user is the only one to see any writes done by him
    - Soft ban - normal ban on all write ops.
    - hard ban - IP ban. done via the reverse proxy.

post/comment modding 3 types
    - Lock thread
    - Delete thread

Core thought:
    - All page fetches should be serverdriven for SEO
    - All data writes can be JS driven

TODO:
Only OG supported images for now
thumbs for posts using https://rsz.io/
Image CDN integration
lazyload using Intersection Observer API
rate limit the routes. Specially write routes
check banned user before write
    - err msg and type to provide function & view
    - create post
    - edit posts
    - like/unlike post
    - comments
    - login
    - logout on User is banned error
human readable hashes
comments
likes for comments
bookmarks for posts and comments
redo view conditionals to give same server html for all cases so as to account for URL level caching. use JS to switch conditonals. read up on caching.
user profile page
basic mod/admin page
refreshtoken
Add meta data for crwalers
add Oembed api
add og metatags
update cookies
Show banned till/for info
allow login for banned users?? current no login